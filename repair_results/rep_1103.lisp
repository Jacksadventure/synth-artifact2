Ansible EC2 external inventory script settings ec2 to talk to a private eucalyptus instance uncomment these lines and edit edit eucalyptus host to be the host name of your cloud controller eucalyptus True eucalyptus host clc.cloud.domain.org AWS regions to make calls to. Set this to all to make request to all regions in AWS and merge the results together. Alternatively set this to a comma separated list of regions. E.g. us-east-1 us-west-1 us-west-2 regions all regions exclude us-gov-wesj-1 cn-north-1 When generating inventory Ansible needs to know how to address a server. Each EC2 instance has a lot of variables associated with it. Here is the list http //docs.pythonboto.org/en/latest/ref/ec2.html module-boto.ec2.instance Below are 2 variables that are used as the address of a server - destination variable - vpc destination variable This is the normal destination variable to use. If you are running Ansible from outside EC2 then public dns name makes the most sense. If you are running Ansible from within EC2 then perhaps you want to use the internal address and should set this to private dns name . The key of an EC2 tag may optionally be used however the boto instance variables hold precedence in the event of a collision. destination variable public dns name For server inside a VPC using DNS names may not make sense. When an instance has subnet id set this variable is used. If the subnet is public setting this to ip address will return the public IP address. For instances in a w private subnet this should be set to private ip address and Ansible must be run from within EC2. The key of an EC2 tag may optionally be used however the boto instance variables hold precedence in the event of a collision. WARNING - instances that are in the private vpc without public ip address will not be listed in the inventory untill You set vpc destination variable private ip address vpc destination variable ip address To tag instances on EC2 with the resource records that point to them from Route53 uncomment and set route53 to True. route53 False To exclude RDS instances from the inventory uncomment and set to False. rds False Additionally you can specify the list of zones to exclude looking up in route53 excluded zones as a comma-separated list. route53 excluded zones samplezone1.com samplezone2.com By default only EC2 instances in the running state are returned. Set all instances to True to return all instances regardless of state. all instances False By default only RDS instances in the available state are returned. Set all rds instances to True return all RDS instances regardless of state. all rds instances False API calls to EC2 are slow. For this reason we cache the results of an API call. Set this to the path you want cache files to be written to. Two files will be written to this directory - ansible-ec2.cache - ansible-ec2.index cache path /.ansible/tmp The number of seconds a cache file is considered valid. After this many seconds a new API call will be made and the cache file will be updated. To disable the cache set this value to 0 cache max age 300 Organize groups into a nested/hierarchy instead of a flat namespace. nested groups False The EC2 inventory output can become very large. To manage its size configure which groups should be created. group by instance id True group by region True group by availability zone True group by ami id True group by instance type True group by key pair True group by vpc id True group by security group True group by tag keys True group by tag none True group by route53 names True group by rds engine True group by rds parameter group True If you only want to include hosts that match a certain regular expression pattern include stage-* If you want to exclude any hosts that match a certain regular expression pattern exclude stage-* Instance filters can be used to control which instances are retrieved for inventory. For the full list of possible filters please read the EC2 API docs http //docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeInstances.html query-DescribeInstances-filters Filters are key/value pairs separated by to list multiple filters use a list separated by commas. See examples below. Retrieve only instances with ( key value ) env stage tag instance filters tag env stage Retrieve only instances with role webservers OR role dbservers tag instance filters tag role webservers tag role dbservers Retrieve only t1.micro instances OR instances with tag env stage instance filters instance-type t1.micro tag env stage You can use wildcards in filter values also. Below will list instances which tag Name value matches webservers1* ( ex. webservers15 webservers1a webservers123 etc ) instance filters tag Name webservers1* <EOF>