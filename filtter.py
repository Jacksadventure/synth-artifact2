#!/usr/bin/env python3
"""
clean_duplicates.py
-------------------
Remove duplicate files generated by github_bulk_fetcher.py.
The script compares filenames *after* the leading 4-digit counter and
keeps only the earliest copy.

Example
-------
Folder contains:
    0001_config.ini
    0032_config.ini
    0004_readme_part1.md
    0088_readme_part1.md
After running:
    0001_config.ini
    0004_readme_part1.md
(all duplicates moved to .trash/ or deleted)

Usage
-----
python clean_duplicates.py /path/to/folder         # safe mode (move to .trash)
python clean_duplicates.py /path/to/folder --delete  # permanently delete
python clean_duplicates.py /path/to/folder --dry     # just list actions
"""

import argparse
import os
import re
import shutil
import sys
from pathlib import Path

COUNTER_RE = re.compile(r"^(\d{4})_(.+)$")   # captures counter and remainder


def main():
    ap = argparse.ArgumentParser(description="Deduplicate numbered files")
    ap.add_argument("folder", help="target directory (from bulk fetcher)")
    ap.add_argument(
        "--delete",
        action="store_true",
        help="permanently delete duplicates instead of moving to .trash",
    )
    ap.add_argument(
        "--dry",
        action="store_true",
        help="dry-run: show what would be removed / moved",
    )
    args = ap.parse_args()

    root = Path(args.folder).resolve()
    if not root.is_dir():
        sys.exit(f"Directory not found: {root}")

    trash_dir = root / ".trash"
    duplicates, kept = 0, 0
    seen: set[str] = set()

    for f in sorted(root.iterdir(), key=lambda p: p.name):
        if not f.is_file():
            continue
        m = COUNTER_RE.match(f.name)
        if not m:
            # skip files not matching pattern
            continue

        remainder = m.group(2)  # part after counter_
        if remainder in seen:
            duplicates += 1
            if args.dry:
                print(f"[dup] {f.name}")
            elif args.delete:
                f.unlink()
                print(f"[del] {f.name}")
            else:
                trash_dir.mkdir(exist_ok=True)
                shutil.move(str(f), trash_dir / f.name)
                print(f"[mv ] {f.name}  â†’  .trash/")
        else:
            kept += 1
            seen.add(remainder)

    print(
        f"\nDone. kept {kept} file(s), "
        f"{'would remove' if args.dry else 'removed' if args.delete else 'moved'} "
        f"{duplicates} duplicate(s)."
    )


if __name__ == "__main__":
    main()